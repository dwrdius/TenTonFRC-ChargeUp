void Robot::AutonomousPeriodic() 
{
// Balance fast (theoretical)
    // double roll = deadband(navX.GetRoll(), 3);
    // if (abs(roll)>8)
    // {
    //     onChargingStation = true;
    //     limitSpeeds(FLDriveMotor, 0.3);
    //     limitSpeeds(FLSwerveMotor, 0.3);
    //     limitSpeeds(FRDriveMotor, 0.3);
    //     limitSpeeds(FRSwerveMotor, 0.3);
    //     limitSpeeds(BLDriveMotor, 0.3);
    //     limitSpeeds(BLSwerveMotor, 0.3);
    //     limitSpeeds(BRDriveMotor, 0.3);
    //     limitSpeeds(BRSwerveMotor, 0.3);
    // }
    // if (onChargingStation && abs(roll) < 6 && roll)
    // {
    //     roll = fmax(-roll / 120, -roll/abs(roll)*0.02); // 0.02 is minimum move speed for balance
    // }
    // else{
    //     roll = 1;
    // }

// Balance slow (tested)
    // double roll = deadband(navX.GetRoll(), 3);
    // if (abs(roll)>8)
    // {
    //     onChargingStation = true;
    //     limitSpeeds(FLDriveMotor, 0.2);
    //     limitSpeeds(FLSwerveMotor, 0.2);
    //     limitSpeeds(FRDriveMotor, 0.2);
    //     limitSpeeds(FRSwerveMotor, 0.2);
    //     limitSpeeds(BLDriveMotor, 0.2);
    //     limitSpeeds(BLSwerveMotor, 0.2);
    //     limitSpeeds(BRDriveMotor, 0.2);
    //     limitSpeeds(BRSwerveMotor, 0.2);
    // }
    // if (onChargingStation)
    // {
    //     roll = -roll / 150;
    // }
    // else{
    //     roll = 1;
    // }
    // autoDesiredStates = swerveKinematics(0, -roll, 0, navX.GetYaw(), false);

    frc::SmartDashboard::PutNumber("intake limitswitch", intakeLimitSwitch.Get());
    frc::SmartDashboard::PutNumber("autoindex", autoIndex);
    if(balance){
        if (autoIndex != 2 && autoIndex != 3 && autoIndex < 5)
        {
            moveToCoord();
            if (autoDesiredStates.fla < 600.0)
            {
                // Update wheel angles for the turn motors to read
                desiredTurnFL = autoDesiredStates.fla;
                desiredTurnFR = autoDesiredStates.fra;
                desiredTurnBL = autoDesiredStates.bla;
                desiredTurnBR = autoDesiredStates.bra;
            }

            setDesiredState(FLSwerveMotor, FLDriveMotor, &FLSwerveState, FLCANCoder.GetAbsolutePosition(), desiredTurnFL, &FLDriveState, autoDesiredStates.flm, autoDesiredStates.fla);
            setDesiredState(FRSwerveMotor, FRDriveMotor, &FRSwerveState, FRCANCoder.GetAbsolutePosition(), desiredTurnFR, &FRDriveState, autoDesiredStates.frm, autoDesiredStates.fra);
            setDesiredState(BLSwerveMotor, BLDriveMotor, &BLSwerveState, BLCANCoder.GetAbsolutePosition(), desiredTurnBL, &BLDriveState, autoDesiredStates.blm, autoDesiredStates.bla);
            setDesiredState(BRSwerveMotor, BRDriveMotor, &BRSwerveState, BRCANCoder.GetAbsolutePosition(), desiredTurnBR, &BRDriveState, autoDesiredStates.brm, autoDesiredStates.bra);
            
        }
        else if (autoIndex == 2)
        {
            table -> PutNumber("pipeline", Limelight::Cone);
            ty = table -> GetNumber("ty", 0.0);
            if (deadband(ty, 5) < 0)
            {
                LLAlignTranslation = -deadband(ty-0.5, 5)/20;
            }
            else if (deadband(ty, 5))
            {
                LLAlignTranslation = -deadband(ty+0.5, 5)/20;
            }
            else
            {
                LLAlignTranslation = 0;
            }
            autoDesiredStates = swerveKinematics(LLAlignTranslation, 0, 0, navX.GetAngle(), false);
            if (autoDesiredStates.fla < 600.0)
            {
                // Update wheel angles for the turn motors to read
                desiredTurnFL = autoDesiredStates.fla;
                desiredTurnFR = autoDesiredStates.fra;
                desiredTurnBL = autoDesiredStates.bla;
                desiredTurnBR = autoDesiredStates.bra;
            }

            setDesiredState(FLSwerveMotor, FLDriveMotor, &FLSwerveState, FLCANCoder.GetAbsolutePosition(), desiredTurnFL, &FLDriveState, autoDesiredStates.flm, autoDesiredStates.fla);
            setDesiredState(FRSwerveMotor, FRDriveMotor, &FRSwerveState, FRCANCoder.GetAbsolutePosition(), desiredTurnFR, &FRDriveState, autoDesiredStates.frm, autoDesiredStates.fra);
            setDesiredState(BLSwerveMotor, BLDriveMotor, &BLSwerveState, BLCANCoder.GetAbsolutePosition(), desiredTurnBL, &BLDriveState, autoDesiredStates.blm, autoDesiredStates.bla);
            setDesiredState(BRSwerveMotor, BRDriveMotor, &BRSwerveState, BRCANCoder.GetAbsolutePosition(), desiredTurnBR, &BRDriveState, autoDesiredStates.brm, autoDesiredStates.bra);
            
            intakePos = 25000;
            intakePercentage = (intakePos-IntakeUpDown.GetSelectedSensorPosition())/80000;
            if (intakePercentage < 0 && !intakeLimitSwitch.Get())
            {
                intakePercentage = 0;
            }
            frc::SmartDashboard::PutNumber("Intake Error", intakePos-IntakeUpDown.GetSelectedSensorPosition());
            if (intakePos - IntakeUpDown.GetSelectedSensorPosition() < 1500 && !deadband(ty, 3))
            {
                intakePercentage = 0;
                IntakeLeader.Set(0.2);
                autoIndex = 3;
            }
            IntakeUpDown.Set(TalonFXControlMode::PercentOutput, intakePercentage);
        }
        else if (autoIndex == 3){
            //cry
            frc::SmartDashboard::PutNumber("neo current", IntakeLeader.GetOutputCurrent());
            if(heresyTimer > 60 || IntakeLeader.GetOutputCurrent() > 30)
            {
                // intakePos = 1000;
                // intakePercentage = (intakePos-IntakeUpDown.GetSelectedSensorPosition())/40000;
                // frc::SmartDashboard::PutNumber("Intake Error", intakePos-IntakeUpDown.GetSelectedSensorPosition());
                // intakePercentage = fmin(-0.1, intakePercentage);
                
                // if (abs(intakePos - IntakeUpDown.GetSelectedSensorPosition()) < 1000)
                // {
                //     autoIndex=4;
                // }

                // if (intakePercentage < 0 && !intakeLimitSwitch.Get())
                // {
                //     intakePercentage = 0;
                // }

                // if (autoIndex==3)
                // {
                //     armPos = -4000;
                //     armPercentage = (armPos-ArmMotor.GetSelectedSensorPosition())/10000;
                //     if (!armLimitSwitch.Get())
                //     {
                //         armPercentage = 0;
                //     }
                //     ArmMotor.Set(TalonFXControlMode::PercentOutput, armPercentage);
                //     if(!ArmMotor.GetSelectedSensorVelocity() && !deadband(armPos-ArmMotor.GetSelectedSensorPosition(), 4))
                //     {
                //         ArmMotor.Set(TalonFXControlMode::PercentOutput, 0);
                //     }
                // }
                // else
                // {
                //     ArmMotor.Set(TalonFXControlMode::PercentOutput, 0);
                // }
                // IntakeUpDown.Set(TalonFXControlMode::PercentOutput, intakePercentage);
                FLSwerveMotor.Set(TalonFXControlMode::PercentOutput, 0);
                FRSwerveMotor.Set(TalonFXControlMode::PercentOutput, 0);
                BLSwerveMotor.Set(TalonFXControlMode::PercentOutput, 0);
                BRSwerveMotor.Set(TalonFXControlMode::PercentOutput, 0);
                FLDriveMotor.Set(TalonFXControlMode::PercentOutput, 0);
                FRDriveMotor.Set(TalonFXControlMode::PercentOutput, 0);
                BLDriveMotor.Set(TalonFXControlMode::PercentOutput, 0);
                BRDriveMotor.Set(TalonFXControlMode::PercentOutput, 0);
                
                IntakeLeader.Set(0);
            }
            else
            {
                heresyTimer++;
                autoDesiredStates = swerveKinematics(0, -0.5, 0, 0, false);
                if (autoDesiredStates.fla < 600.0)
                {
                    // Update wheel angles for the turn motors to read
                    desiredTurnFL = autoDesiredStates.fla;
                    desiredTurnFR = autoDesiredStates.fra;
                    desiredTurnBL = autoDesiredStates.bla;
                    desiredTurnBR = autoDesiredStates.bra;
                }

                setDesiredState(FLSwerveMotor, FLDriveMotor, &FLSwerveState, FLCANCoder.GetAbsolutePosition(), desiredTurnFL, &FLDriveState, autoDesiredStates.flm, autoDesiredStates.fla);
                setDesiredState(FRSwerveMotor, FRDriveMotor, &FRSwerveState, FRCANCoder.GetAbsolutePosition(), desiredTurnFR, &FRDriveState, autoDesiredStates.frm, autoDesiredStates.fra);
                setDesiredState(BLSwerveMotor, BLDriveMotor, &BLSwerveState, BLCANCoder.GetAbsolutePosition(), desiredTurnBL, &BLDriveState, autoDesiredStates.blm, autoDesiredStates.bla);
                setDesiredState(BRSwerveMotor, BRDriveMotor, &BRSwerveState, BRCANCoder.GetAbsolutePosition(), desiredTurnBR, &BRDriveState, autoDesiredStates.brm, autoDesiredStates.bra);
            }
        }
        else
        {
            FLSwerveMotor.Set(TalonFXControlMode::PercentOutput, 0);
            FRSwerveMotor.Set(TalonFXControlMode::PercentOutput, 0);
            BLSwerveMotor.Set(TalonFXControlMode::PercentOutput, 0);
            BRSwerveMotor.Set(TalonFXControlMode::PercentOutput, 0);
            FLDriveMotor.Set(TalonFXControlMode::PercentOutput, 0);
            FRDriveMotor.Set(TalonFXControlMode::PercentOutput, 0);
            BLDriveMotor.Set(TalonFXControlMode::PercentOutput, 0);
            BRDriveMotor.Set(TalonFXControlMode::PercentOutput, 0);
        }
        if (!autoIndex)
        {
            armPos = -4000;
            armPercentage = (armPos-ArmMotor.GetSelectedSensorPosition())/10000;
            if (!armLimitSwitch.Get())
            {
                armPercentage = 0;
            }
            ArmMotor.Set(TalonFXControlMode::PercentOutput, armPercentage);
            if(!ArmMotor.GetSelectedSensorVelocity() && !deadband(armPos-ArmMotor.GetSelectedSensorPosition(), 4))
            {
                ArmMotor.Set(TalonFXControlMode::PercentOutput, 0);
            }
        }
        else
        {
            ArmMotor.Set(TalonFXControlMode::PercentOutput, 0);
        }
        
    }
    else if (cubeAutonomous) {
        autostop++;
        frc::SmartDashboard::PutNumber("Autostop", autostop);
        if (autostop < 4000)
        {
            armPos = -50000;
            armPercentage = (armPos-ArmMotor.GetSelectedSensorPosition())/10000;
            if (!armLimitSwitch.Get())
            {
                armPercentage = 0;
            }
            ArmMotor.Set(TalonFXControlMode::PercentOutput, armPercentage);
            if(!ArmMotor.GetSelectedSensorVelocity() && !deadband(armPos-ArmMotor.GetSelectedSensorPosition(), 4))
            {
                ArmMotor.Set(TalonFXControlMode::PercentOutput, 0);
                autostop = 4000; // arbitrary impossible value
            }
        }
        else
        {
            if (autostop < 8000) // down
            {
                intakePos = 7000;
                intakePercentage = (intakePos-IntakeUpDown.GetSelectedSensorPosition())/50000;
                frc::SmartDashboard::PutNumber("Intake Error", intakePos-IntakeUpDown.GetSelectedSensorPosition());
                if (intakePos-IntakeUpDown.GetSelectedSensorPosition() < 0)
                {
                    intakePercentage = fmin(-0.1, intakePercentage);
                }
                else
                {
                    intakePercentage = fmax(0.05, intakePercentage);
                }
                if (abs(intakePos - IntakeUpDown.GetSelectedSensorPosition()) < 1500 && autostop < 5000)
                {
                    autostop = 5000;
                }
                if (intakePercentage < 0 && !intakeLimitSwitch.Get())
                {
                    intakePercentage = 0;
                }
                IntakeUpDown.Set(TalonFXControlMode::PercentOutput, intakePercentage);
                if(autostop > 5020)
                {
                    IntakeLeader.Set(-1);
                    if (autostop > 5040)
                    {
                        IntakeLeader.Set(0);
                        autostop = 8000;
                    }
                }
            }
            else 
            {
                intakePos = 1000;
                intakePercentage = (intakePos-IntakeUpDown.GetSelectedSensorPosition())/40000;
                frc::SmartDashboard::PutNumber("Intake Error", intakePos-IntakeUpDown.GetSelectedSensorPosition());
                intakePercentage = fmin(-0.1, intakePercentage);
                
                if (abs(intakePos - IntakeUpDown.GetSelectedSensorPosition()) < 1500)
                {
                    autostop = 12000;
                }

                if (intakePercentage < 0 && !intakeLimitSwitch.Get())
                {
                    intakePercentage = 0;
                }
                IntakeUpDown.Set(TalonFXControlMode::PercentOutput, intakePercentage);
                if (autostop > 11999)
                {
                    IntakeUpDown.Set(TalonFXControlMode::PercentOutput, 0);
                    balance = true;
                    cubeAutonomous = false;
                }
            }
        }
    }
}
